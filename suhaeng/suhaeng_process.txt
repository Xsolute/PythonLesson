문제해결방법 설계
1. 개념 정의
ex) 약수 인수 계수 상수항 일차식 이차식
=> 행렬(matrix), 벡터(vector)

2. 필요지식정리
ex) 인수분해, 나머지정리
=> 행렬사칙연산(벡터곱 포함), 행렬곱, 행렬치환

3. 문제 분해
ex) 이차식 입력 방법 결정, 나머지 정리를 활용하여 이차식 인수 분해(상수항의 약수 찾기 -> 이차식에 대입했을 때 나머지가 0인 약수 결정 -> 해당 약수로 일차식 표현), 인수분해된 일차식 출력
=> 행렬 입력 방법 결정, numpy 라이브러리를 활용하여 행렬계산(행렬 정의와 계산), 계산 완료된 행렬 출력

4. 알고리즘 설계
ex) 순서도 그리기, 의사코드 표현


문제해결방법 수행
1. 입출력 설계
ex)입력: 일차항의 계수, 상수항 => 정수
   출력: 인수분해 결과 => 일차식
입력: 행렬 입력, 수행할 계산 => 유리수
출력: 계산 결과 => 행렬(또는 유리수)

2. 변수 / 사용자 함수 정의
ex) 변수의 의미, 함수의 기능 / 목적
=> 

3. 프로그래밍
ex) 주석 추가
=> 주석 추가

문제해결방법 검토
1. Test Case 검토
ex) 입력의 다양성 확보, 입출력 오류 검토

2. 예상 의문점 / 심화 질의
ex) 근의 공식 사용이 가능할까?, 이차항의 계수가 1이 아니라면?
=> 더 많은 계산을 할 수 있지 않을까?, 계산할 행렬이 3개 이상이라면?
