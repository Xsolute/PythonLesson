= 문제풀기 =
=== 추상화 ===
현재상태 정의, 목표상태 정의, 문제 분해, 핵심요소(조건) 추출

=== 알고리즘 ===
0개 이상의 입력
1개 이상의 결과
명확성 / 유한성 / 실행가능성

=== 자동화 ===
코딩
코오딩
cooooooooodig
+ 시뮬레이션

=== 하노이 ===
현재상태: 탑이 모두 A기둥에 있음
목표상태: 탑이 모두 C기둥에 있음
문제분해: ???
핵심요소: ???
-> 이걸로는 못써먹음
현재상태: 탑이 모두 A기둥에 있음
목표상태: 제일 큰 원판이 A기둥에 있고, 나머지 원판들이 B기둥에 있음(더 상세하게 분해)
문제분해: 위의 과정이 문제 분해임.
핵심요소: 제일 큰 원판 -> n, 나머지 원판 -> 1 ~ n - 1 (큰 묶음) \
	큰 원판 이외의 나머지 원판들을 인접 기둥에 옮기고 큰 원판을 마지막 기둥에 옮긴 후 나머지 원판을 옮긴다. 이 과정을 반복.
-> 이 다음의 과정을 생각해보자
현재상태: 제일 큰 원판이 A기둥에 있고, 나머지 원판들이 B기둥에 있음.
목표상태: 제일 큰 원판이 C기둥에 있고, 나머지 원판들이 B기둥에 있음.
문제분해: 위의 과정이 문제 분해임.
핵심요소: 제일 큰 원판 옮기는 횟수 -> +1
-> 이 다음 과정까지 생각해보자
현재상태: 제일 큰 원판이 C기둥에 있고, 나머지 원판들이 B기둥에 있음.
목표상태: 모든 원판이 C기둥에 있음.
문제분해: 위의 과정이 문제 분해임.
핵심요소: 나머지 기둥 옮기는 횟수 -> n - 1, n - 1이 1이면 종료
=== 실제로 문제해결 해보기 ===
계단 오를 때 1칸, 2칸을 이용해 몇가지 방법으로 오를 수 있는지 구하기
현재상태: 

=== 실제로 문제해결 해보기 2  ===
중복되지 않은 10개의 코드를 가진 암호코드표가 주어지고,
각각의 암호 코드에는 0부터 9까지의 숫자가 매칭된다.
암호문이 주어졌을 때 이 암호코드를 기반으로 암호문을
복호화하는 알고리즘(파이썬 코드)를 작성하시오.
단, 암호문은 공백을 허용한다.
예:
input1 = 암호코드표 (lohcgpdabk)
input2 = 암호문 (cdp ohk)
output = 복호화된 숫자(365 129)
현재상태 : 암호코드가 입력된 상황
목표상태: 암호코드에서 암호문의 문자를 찾아 인덱스 출력
핵심요소1: 공백이 입력되면 공백을 반환
핵심요소2: 문자가 입력되면 암호문을 순차탐색하여 인덱스 반환
없는 문자(공백)에 대해서는 동작하지 않음 -> 공백은 공백 그대로 출력